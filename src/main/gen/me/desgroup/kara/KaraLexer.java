/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package me.desgroup.kara;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import me.desgroup.kara.psi.KaraTypes;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>kara.flex</tt>
 */
class KaraLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SINGLE_STRING = 2;
  public static final int DOUBLE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\4\11\1\46\1\47\1\50\1\11\1\51\1\11\1\52\1\53\4\11\51"+
    "\14\1\54\3\14\1\55\1\56\4\14\1\57\6\14\1\60\3\11\1\61\u02c1\11\1\62\277\11");

  /* The ZZ_CMAP_Y table has 3264 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11\1\14\34"+
    "\11\1\15\1\16\1\17\1\20\7\11\1\21\1\22\1\11\1\23\4\11\1\24\10\11\1\25\12\11"+
    "\1\26\1\11\1\27\1\26\1\11\1\30\1\26\1\11\1\31\1\32\1\11\1\33\1\34\1\35\1\36"+
    "\4\11\1\37\6\11\1\40\1\41\1\42\1\43\3\11\1\44\6\11\1\16\3\11\1\45\2\11\1\46"+
    "\1\20\1\11\1\1\1\33\3\20\1\11\1\47\1\20\1\50\10\11\1\51\1\26\1\52\1\53\1\41"+
    "\1\54\1\55\1\56\1\51\1\57\1\60\1\53\1\41\1\61\1\62\1\63\1\64\1\65\1\66\1\23"+
    "\1\41\1\67\1\70\1\71\1\51\1\72\1\73\1\53\1\41\1\67\1\74\1\75\1\51\1\76\1\77"+
    "\1\100\1\101\1\37\1\102\1\103\1\64\1\104\1\105\1\106\1\41\1\107\1\110\1\111"+
    "\1\51\1\20\1\105\1\106\1\41\1\112\1\110\1\113\1\51\1\114\1\105\1\106\2\11"+
    "\1\115\1\116\1\51\1\117\1\120\1\121\1\11\1\122\1\123\1\124\1\64\1\125\1\26"+
    "\2\11\1\126\1\127\1\130\2\20\1\131\1\132\1\133\1\134\1\135\1\136\2\20\1\71"+
    "\1\137\1\130\1\140\1\141\1\11\1\142\1\26\1\143\1\141\1\11\1\142\1\144\3\20"+
    "\4\11\1\130\4\11\1\46\2\11\1\145\2\11\1\146\24\11\1\147\1\150\2\11\1\147\2"+
    "\11\1\151\1\152\1\14\3\11\1\152\3\11\1\44\2\20\1\11\1\20\5\11\1\153\1\26\45"+
    "\11\1\42\1\11\1\154\1\33\4\11\1\155\1\156\1\157\1\160\1\11\1\160\1\11\1\161"+
    "\1\157\1\162\5\11\1\163\1\130\1\20\1\164\1\130\5\11\1\165\2\11\1\33\4\11\1"+
    "\65\1\11\1\127\2\1\1\64\1\11\1\46\1\160\2\11\1\1\1\11\2\130\2\20\1\11\1\1"+
    "\3\11\1\127\1\11\1\42\2\130\1\166\1\46\4\20\4\11\1\1\1\130\1\167\1\161\7\11"+
    "\1\161\3\11\1\165\1\107\2\11\1\46\1\156\4\20\1\170\1\11\1\130\17\11\1\171"+
    "\21\11\1\153\2\11\1\153\1\172\1\11\1\46\3\11\1\173\1\174\1\175\1\142\1\174"+
    "\1\176\1\20\1\177\1\43\1\71\1\200\1\143\1\201\1\20\1\142\2\11\1\20\1\142\1"+
    "\202\1\71\1\203\1\204\1\205\1\136\1\206\1\20\2\11\1\156\147\20\2\11\1\127"+
    "\2\11\1\127\10\11\1\207\1\161\2\11\1\145\3\11\1\30\1\43\1\11\1\210\4\211\2"+
    "\11\2\20\1\43\35\20\1\212\1\20\1\26\1\213\1\26\4\11\1\214\1\26\4\11\1\146"+
    "\1\215\1\11\1\127\1\26\4\11\1\127\1\20\1\11\1\33\3\20\1\11\40\20\133\11\1"+
    "\65\4\20\136\11\1\33\1\20\10\11\1\142\4\20\2\11\1\46\20\11\1\142\1\11\1\1"+
    "\1\20\3\11\1\216\7\11\1\16\1\20\1\217\1\220\5\11\1\221\1\11\1\127\1\165\3"+
    "\20\1\217\2\11\1\165\1\222\3\11\1\161\4\11\1\65\1\130\1\11\1\223\2\11\1\46"+
    "\2\11\1\161\1\11\1\142\4\11\1\224\1\130\1\11\1\127\3\11\1\210\1\46\1\130\1"+
    "\11\1\121\4\11\1\34\1\225\1\11\1\226\1\227\1\230\1\211\2\11\1\146\1\65\7\11"+
    "\1\231\1\130\72\11\1\161\1\11\1\232\2\11\1\1\20\20\26\11\1\46\6\11\1\130\2"+
    "\20\1\210\1\233\1\41\1\234\1\235\6\11\1\16\1\20\1\236\25\11\1\46\1\20\4\11"+
    "\1\220\2\11\1\165\2\20\1\142\1\11\1\20\1\11\1\237\1\240\1\20\1\104\1\143\7"+
    "\11\1\42\1\241\1\130\1\26\1\126\1\26\1\33\1\64\4\11\1\127\1\242\1\243\1\244"+
    "\1\245\1\246\1\11\1\14\1\247\2\46\2\20\7\11\1\33\4\20\3\11\1\160\7\20\1\250"+
    "\10\20\1\11\1\142\3\11\2\71\1\20\2\11\1\240\1\11\1\33\2\11\1\33\1\11\1\46"+
    "\2\11\1\251\1\252\2\20\11\11\1\46\1\130\2\11\1\251\1\11\1\1\2\11\1\165\3\11"+
    "\1\161\11\20\23\11\1\210\1\11\1\65\1\165\11\20\1\253\2\11\1\254\1\11\1\65"+
    "\1\11\1\210\1\11\1\127\4\20\1\11\1\255\1\11\1\65\1\11\1\130\4\20\3\11\1\256"+
    "\4\20\1\257\1\260\1\11\1\261\2\20\1\11\1\142\1\11\1\142\2\20\1\141\1\11\1"+
    "\210\1\20\3\11\1\65\1\11\1\65\1\11\1\34\1\11\1\16\6\20\4\11\1\156\3\20\3\11"+
    "\1\34\3\11\1\34\60\20\4\11\1\210\1\20\1\64\1\43\3\11\1\262\1\20\1\11\1\156"+
    "\1\130\3\11\1\143\1\20\2\11\1\263\4\11\1\264\1\36\2\20\1\11\1\23\1\11\1\265"+
    "\4\20\1\266\1\31\1\156\3\11\1\33\1\130\1\52\1\53\1\41\1\67\1\74\1\267\1\270"+
    "\1\160\10\20\4\11\1\33\1\130\2\20\4\11\1\271\1\130\12\20\3\11\1\272\1\71\1"+
    "\273\2\20\4\11\1\274\1\130\2\20\3\11\1\165\1\130\3\20\1\11\1\107\1\1\1\130"+
    "\26\20\4\11\1\130\1\43\20\20\3\11\1\127\1\166\3\11\1\51\1\130\2\20\3\11\1"+
    "\156\20\20\1\41\2\11\1\14\1\71\1\130\1\20\1\220\1\11\1\220\1\141\1\210\4\20"+
    "\1\275\2\11\1\276\1\165\1\130\52\20\71\11\1\130\6\20\6\11\1\127\1\20\14\11"+
    "\1\161\53\20\2\11\1\127\75\20\44\11\1\210\33\20\43\11\1\156\1\11\1\127\1\130"+
    "\6\20\1\11\1\46\1\160\3\11\1\210\1\161\1\130\1\236\1\277\1\11\67\20\4\11\1"+
    "\160\2\11\1\127\1\43\1\11\4\20\1\16\1\20\76\11\1\142\1\20\57\11\1\34\20\20"+
    "\21\11\1\127\5\20\30\11\1\1\20\20\6\11\1\33\1\142\1\156\1\300\1\161\113\20"+
    "\1\301\1\11\1\302\1\20\1\303\11\20\1\304\33\20\5\11\1\143\3\11\1\157\1\305"+
    "\1\306\1\307\3\11\1\310\1\311\1\11\1\312\1\313\1\106\24\11\1\272\1\11\1\106"+
    "\1\146\1\11\1\146\1\11\1\143\1\11\1\143\1\127\1\11\1\127\1\11\1\41\1\11\1"+
    "\41\1\11\1\314\3\11\40\20\3\11\1\232\2\11\1\142\1\315\1\241\1\167\1\26\25"+
    "\20\1\14\1\221\1\316\75\20\14\11\1\160\1\210\2\20\4\11\1\33\1\130\112\20\1"+
    "\307\1\11\1\317\1\320\1\321\1\322\1\323\1\324\1\171\1\1\1\325\1\1\24\20\55"+
    "\11\1\210\2\20\103\11\1\160\15\11\1\46\150\11\1\16\123\11\1\71\1\20\41\11"+
    "\1\46\36\20\1\76\1\20\6\11\10\20\17\11\41\20");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\65\1\70\1\4\2\3\1\5\16\65\4\0\1\70\1\54\1\63\1\1\1\66\1\53\1\37\1\62\1"+
    "\43\1\44\1\6\1\51\1\35\1\52\1\47\1\2\12\64\1\34\1\1\1\55\1\36\1\50\1\56\1"+
    "\40\4\65\2\66\10\65\1\66\13\65\1\45\1\60\1\46\1\1\1\65\1\0\1\26\1\17\1\16"+
    "\1\32\1\12\1\13\1\61\1\33\1\24\1\65\1\22\1\20\1\27\1\15\1\21\1\11\1\65\1\25"+
    "\1\30\1\7\1\14\1\31\1\65\1\23\1\10\1\65\1\41\1\57\1\42\1\1\6\65\1\67\32\65"+
    "\1\70\1\0\4\65\4\0\1\65\2\0\1\65\7\0\1\65\4\0\1\65\5\0\7\65\1\0\12\65\4\0"+
    "\14\65\16\0\5\65\7\0\1\65\1\0\1\65\21\0\5\65\1\0\2\65\2\0\4\65\1\0\1\65\6"+
    "\0\1\65\1\0\3\65\1\0\1\65\1\0\4\65\1\0\23\65\1\0\13\65\1\0\5\65\2\0\6\65\1"+
    "\0\26\65\2\0\1\65\6\0\10\65\7\0\17\65\1\0\1\65\1\0\2\65\1\0\2\65\1\0\1\65"+
    "\10\0\13\65\5\0\3\65\15\0\6\65\5\0\1\65\4\0\13\65\1\0\1\65\3\0\12\65\4\0\6"+
    "\65\1\0\11\65\1\0\12\65\1\0\23\65\2\0\1\65\17\0\14\65\2\0\11\65\4\0\1\65\5"+
    "\0\16\65\2\0\5\65\1\0\10\65\6\0\20\65\2\0\16\65\1\0\10\65\2\0\2\65\2\0\16"+
    "\65\1\0\1\65\3\0\4\65\2\0\11\65\2\0\2\65\2\0\4\65\10\0\1\65\4\0\2\65\1\0\5"+
    "\65\7\0\2\65\4\0\3\65\1\0\6\65\4\0\2\65\1\0\2\65\1\0\2\65\1\0\2\65\2\0\1\65"+
    "\1\0\5\65\4\0\2\65\2\0\3\65\3\0\1\65\7\0\4\65\1\0\1\65\7\0\20\65\13\0\3\65"+
    "\1\0\11\65\1\0\2\65\1\0\2\65\1\0\5\65\2\0\12\65\1\0\3\65\1\0\3\65\2\0\1\65"+
    "\20\0\1\65\7\0\7\65\1\0\3\65\1\0\10\65\2\0\6\65\2\0\2\65\2\0\3\65\10\0\2\65"+
    "\4\0\2\65\1\0\1\65\1\0\1\65\20\0\2\65\1\0\6\65\3\0\3\65\1\0\4\65\3\0\2\65"+
    "\1\0\1\65\1\0\2\65\3\0\2\65\3\0\3\65\3\0\5\65\3\0\3\65\1\0\4\65\2\0\1\65\6"+
    "\0\1\65\21\0\1\65\6\0\4\65\1\0\10\65\1\0\3\65\1\0\30\65\3\0\10\65\1\0\3\65"+
    "\1\0\4\65\7\0\2\65\1\0\3\65\5\0\4\65\1\0\5\65\2\0\4\65\5\0\2\65\7\0\1\65\2"+
    "\0\2\65\15\0\5\65\1\0\3\65\1\0\5\65\5\0\4\65\7\0\1\65\12\0\6\65\2\0\2\65\1"+
    "\0\22\65\3\0\10\65\1\0\11\65\1\0\1\65\2\0\7\65\3\0\1\65\4\0\6\65\1\0\1\65"+
    "\1\0\10\65\2\0\2\65\14\0\13\65\4\0\20\65\1\0\12\65\7\0\2\65\1\0\1\65\2\0\2"+
    "\65\1\0\1\65\2\0\1\65\6\0\4\65\1\0\7\65\1\0\3\65\1\0\1\65\1\0\1\65\2\0\2\65"+
    "\1\0\15\65\1\0\3\65\2\0\5\65\1\0\1\65\1\0\6\65\2\0\12\65\2\0\4\65\10\0\2\65"+
    "\13\0\1\65\1\0\1\65\1\0\1\65\4\0\12\65\1\0\24\65\3\0\5\65\1\0\12\65\6\0\1"+
    "\65\11\0\6\65\1\0\1\65\5\0\1\65\2\0\13\65\1\0\15\65\1\0\4\65\2\0\7\65\1\0"+
    "\1\65\1\0\4\65\2\0\1\65\1\0\4\65\2\0\7\65\1\0\1\65\1\0\4\65\2\0\16\65\2\0"+
    "\6\65\2\0\1\70\32\65\3\0\13\65\7\0\15\65\1\0\7\65\13\0\4\65\14\0\1\65\1\0"+
    "\2\65\14\0\4\65\3\0\1\65\3\0\3\65\15\0\4\65\1\0\10\65\17\0\1\65\23\0\10\65"+
    "\1\0\26\65\1\0\15\65\1\0\1\65\1\0\1\65\1\0\1\65\1\0\6\65\1\0\7\65\1\0\1\65"+
    "\3\0\3\65\1\0\7\65\3\0\4\65\2\0\6\65\4\0\13\70\5\65\10\0\2\3\5\65\1\70\4\0"+
    "\1\65\12\0\1\70\1\0\1\65\15\0\1\65\1\0\1\65\3\0\13\65\2\0\1\65\4\0\1\65\2"+
    "\0\12\65\1\0\1\65\3\0\5\65\6\0\1\65\1\0\1\65\1\0\1\65\1\0\4\65\1\0\1\65\5"+
    "\0\5\65\4\0\1\65\1\0\5\65\6\0\14\65\11\0\7\65\1\0\7\65\1\0\1\70\4\0\3\65\11"+
    "\0\5\65\2\0\5\65\3\0\7\65\2\0\2\65\2\0\3\65\5\0\13\65\4\0\12\65\1\0\1\65\7"+
    "\0\11\65\2\0\27\65\2\0\5\65\10\0\1\65\7\0\10\65\3\0\1\65\1\0\1\65\2\0\1\65"+
    "\16\0\1\65\13\0\3\65\4\0\5\65\12\0\6\65\2\0\6\65\2\0\6\65\11\0\13\65\1\0\2"+
    "\65\2\0\7\65\4\0\5\65\3\0\5\65\5\0\12\65\1\0\5\65\1\0\1\65\1\0\2\65\1\0\2"+
    "\65\1\0\12\65\3\0\15\65\3\0\2\65\30\0\3\65\4\0\1\65\15\0\6\65\2\0\6\65\2\0"+
    "\6\65\2\0\3\65\3\0\2\65\3\0\2\65\22\0\3\65\4\0\14\65\1\0\16\65\1\0\2\65\1"+
    "\0\1\65\15\0\1\65\2\0\4\65\4\0\10\65\1\0\5\65\12\0\6\65\2\0\1\65\1\0\14\65"+
    "\1\0\2\65\3\0\1\65\2\0\4\65\1\0\2\65\12\0\10\65\6\0\6\65\1\0\2\65\5\0\10\65"+
    "\1\0\3\65\1\0\13\65\4\0\3\65\4\0\14\65\2\0\1\65\2\0\4\65\2\0\1\65\11\0\5\65"+
    "\5\0\3\65\3\0\10\65\6\0\1\65\1\0\7\65\1\0\1\65\1\0\4\65\1\0\2\65\6\0\1\65"+
    "\5\0\7\65\2\0\7\65\3\0\6\65\1\0\1\65\10\0\6\65\2\0\10\65\10\0\6\65\2\0\1\65"+
    "\3\0\1\65\13\0\7\65\1\0\2\65\1\0\14\65\3\0\1\65\1\0\2\65\1\0\11\65\5\0\15"+
    "\65\3\0\2\65\6\0\5\65\3\0\6\65\2\0\7\65\16\0\4\65\4\0\3\65\15\0\1\65\2\0\2"+
    "\65\2\0\4\65\1\0\14\65\1\0\1\65\1\0\7\65\1\0\21\65\1\0\4\65\2\0\10\65\1\0"+
    "\7\65\1\0\14\65\1\0\4\65\1\0\5\65\1\0\1\65\3\0\11\65\1\0\10\65\2\0\2\65\5"+
    "\0\1\65\12\0\2\65\1\0\2\65\1\0\5\65\6\0\2\65\1\0\1\65\2\0\1\65\1\0\12\65\1"+
    "\0\4\65\1\0\1\65\1\0\1\65\6\0\1\65\4\0\1\65\1\0\1\65\1\0\1\65\1\0\3\65\1\0"+
    "\2\65\1\0\1\65\2\0\1\65\1\0\1\65\1\0\1\65\1\0\1\65\1\0\1\65\1\0\2\65\1\0\1"+
    "\65\2\0\4\65\1\0\7\65\1\0\4\65\1\0\4\65\1\0\1\65\2\0\3\65\1\0\5\65\1\0\5\65");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\21\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\31\1\32\1\1\1\3\2\33"+
    "\1\34\6\0\1\35\1\36\1\37\3\0\1\37\34\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\53\1\0\1\53\1\54"+
    "\1\0\2\55\27\0\2\56\4\0\2\57\7\0\1\55"+
    "\2\0\2\60\4\0\2\61\12\0\2\62\1\0\2\63"+
    "\2\0\2\64\2\0\1\65\1\0\1\65\1\0\2\66"+
    "\2\67\1\0\2\70\2\71\2\0\2\72\1\0\2\73"+
    "\7\0\2\74\4\0\2\75\2\76\3\0\2\77\2\100"+
    "\6\0\2\101\2\0\2\102\2\103\2\104\2\105\1\106"+
    "\1\107\2\110\1\0\2\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u011d\0\u011d\0\u05ca\0\u0603\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u011d\0\u011d"+
    "\0\u011d\0\u0804\0\u023a\0\u011d\0\u083d\0\u011d\0\u0876\0\u08af"+
    "\0\253\0\344\0\u08e8\0\u0921\0\u011d\0\u011d\0\u095a\0\u023a"+
    "\0\u0993\0\u09cc\0\u023a\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u011d\0\u1041\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u107a\0\u10b3\0\u0804\0\u10ec\0\u011d"+
    "\0\u1125\0\u011d\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u0e07\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u0f24\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u10b3"+
    "\0\u1125\0\u0921\0\u1929\0\u1962\0\u199b\0\u1242\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u135f\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u160b"+
    "\0\u1d64\0\u1d9d\0\u16ef\0\u1dd6\0\u1e0f\0\u1e48\0\u179a\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u1929\0\u2010"+
    "\0\u1962\0\u2049\0\u2082\0\u1a0d\0\u20bb\0\u1a46\0\u20f4\0\u212d"+
    "\0\u2166\0\u1b9c\0\u219f\0\u21d8\0\u1c0e\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u1e81\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u20f4\0\u24f6\0\u212d\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\u2283\0\u2613\0\u22bc\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u252f\0\u27db\0\u2814\0\u284d"+
    "\0\u264c\0\u2886\0\u2685\0\u28bf\0\u26be\0\u28f8\0\u26f7\0\u023a"+
    "\0\u023a\0\u2931\0\u27db\0\u296a\0\u29a3\0\u296a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\3\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\3\13\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\13\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\13\1\60\1\61\1\62"+
    "\2\13\1\63\1\10\60\64\1\65\1\64\2\66\5\64"+
    "\51\0\2\67\11\0\1\70\5\0\6\71\25\0\25\71"+
    "\1\0\2\71\2\0\3\71\7\0\25\72\25\0\1\72"+
    "\2\0\4\72\74\0\1\73\3\0\1\74\27\0\1\75"+
    "\35\0\3\10\61\0\2\10\36\0\1\76\33\0\6\77"+
    "\1\100\1\101\14\100\1\102\6\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\25\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\1\104\24\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\14\100\1\105\10\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\5\100\1\106\3\100\1\107\1\110"+
    "\4\100\1\111\5\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\10\100\1\112\1\113\3\100\1\114"+
    "\3\100\1\115\3\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\5\100\1\116\4\100\1\117\12\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\12\100\1\120\12\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\1\100\1\121\7\100\1\122\4\100"+
    "\1\123\6\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\3\100\1\124\6\100\1\125\12\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\4\100"+
    "\1\126\1\100\1\127\11\100\1\130\4\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\3\100\1\131"+
    "\21\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\6\100\1\132\12\100\1\133\3\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\12\100\1\134"+
    "\12\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\24\100\1\135\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\17\100\1\136\5\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\12\100\1\137"+
    "\12\100\25\77\1\100\2\77\2\100\2\103\1\77\36\0"+
    "\1\140\11\0\1\141\57\0\1\142\67\0\1\143\70\0"+
    "\1\144\25\0\1\145\42\0\1\146\25\0\1\145\42\0"+
    "\1\147\70\0\1\150\70\0\1\151\110\0\1\152\71\0"+
    "\1\153\12\0\6\154\25\100\13\154\1\155\11\154\1\100"+
    "\2\154\1\156\1\100\2\157\1\154\3\160\3\0\61\160"+
    "\1\0\1\160\64\0\1\70\53\0\1\161\14\0\1\70"+
    "\4\0\3\73\2\162\1\163\61\73\1\162\1\73\6\74"+
    "\1\164\62\74\1\0\6\77\25\0\25\77\1\0\2\77"+
    "\2\0\3\77\1\0\6\77\2\100\1\165\22\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\5\100"+
    "\1\166\17\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\16\100\1\167\6\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\1\170\14\100\1\171"+
    "\7\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\6\100\1\172\16\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\12\100\1\173\12\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\16\100"+
    "\1\174\6\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\11\100\1\175\13\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\1\100\1\176\23\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\12\100\1\177\12\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\6\100\1\200\16\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\24\100\1\201"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\11\100\1\202\13\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\1\203\24\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\6\100\1\204\16\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\1\205\24\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\12\100\1\206\12\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\3\100\1\207\21\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\1\210\24\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\6\100\1\211\1\212\15\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\213\25\100\25\213"+
    "\1\100\2\213\2\100\2\214\1\213\1\0\6\77\1\215"+
    "\24\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\2\100\1\216\22\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\1\217\24\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\1\100\1\220"+
    "\23\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\221\25\100\25\221\1\100\2\221\2\100\2\222\1\221"+
    "\1\0\6\77\22\100\1\223\2\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\12\100\1\224\4\100"+
    "\1\225\5\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\16\100\1\226\6\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\5\100\1\227\17\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\154"+
    "\25\0\13\154\1\155\11\154\1\0\2\154\1\145\1\0"+
    "\3\154\1\0\6\154\25\0\25\154\1\0\2\154\2\0"+
    "\3\154\1\0\6\154\25\0\25\154\1\0\2\154\1\230"+
    "\1\0\3\154\1\0\6\154\25\100\25\154\1\100\2\154"+
    "\2\100\2\157\1\154\64\0\1\231\10\0\1\162\64\0"+
    "\2\74\1\232\3\74\1\164\62\74\1\0\6\77\3\100"+
    "\1\233\21\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\3\100\1\234\21\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\235\25\100\25\235\1\100"+
    "\2\235\2\100\2\236\1\235\1\0\6\77\3\100\1\237"+
    "\21\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\1\240\24\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\7\100\1\241\15\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\17\100\1\242"+
    "\5\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\243\25\100\25\243\1\100\2\243\2\100\2\244\1\243"+
    "\1\0\6\77\21\100\1\245\3\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\1\246\24\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\6\100"+
    "\1\247\16\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\1\250\24\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\12\100\1\251\12\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\11\100"+
    "\1\252\13\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\24\100\1\253\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\1\254\24\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\3\100\1\250"+
    "\21\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\7\100\1\255\15\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\17\100\1\256\5\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\257\25\100"+
    "\25\257\1\100\2\257\2\100\2\260\1\257\1\0\6\77"+
    "\25\100\25\77\1\250\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\13\100\1\261\11\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\213\25\0\25\213\1\0\2\213"+
    "\2\0\3\213\1\0\6\262\25\100\25\262\1\100\2\262"+
    "\2\100\2\263\1\262\1\0\6\77\12\100\1\264\12\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\77"+
    "\5\100\1\265\17\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\266\25\100\25\266\1\100\2\266\2\100"+
    "\2\267\1\266\1\0\6\221\25\0\25\221\1\0\2\221"+
    "\2\0\3\221\1\0\6\77\3\100\1\270\21\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\16\100"+
    "\1\242\6\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\16\100\1\271\6\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\272\17\100\1\273\5\100"+
    "\25\272\1\100\2\272\2\100\2\274\1\272\1\0\6\77"+
    "\10\100\1\275\14\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\276\25\100\25\276\1\100\2\276\2\100"+
    "\2\277\1\276\1\0\6\300\25\100\25\300\1\100\2\300"+
    "\2\100\2\301\1\300\1\0\6\235\25\0\25\235\1\0"+
    "\2\235\2\0\3\235\1\0\6\77\16\100\1\302\6\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\303"+
    "\25\100\25\303\1\100\2\303\2\100\2\304\1\303\1\0"+
    "\6\305\25\100\25\305\1\100\2\305\2\100\2\306\1\305"+
    "\1\0\6\77\1\307\24\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\243\25\0\25\243\1\0\2\243"+
    "\2\0\3\243\1\0\6\77\3\100\1\310\21\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\77\3\100"+
    "\1\307\21\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\25\100\25\77\1\307\2\77\2\100\2\103"+
    "\1\77\1\0\6\311\25\100\25\311\1\100\2\311\2\100"+
    "\2\312\1\311\1\0\6\77\16\100\1\313\6\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\314\25\100"+
    "\25\314\1\100\2\314\2\100\2\315\1\314\1\0\6\77"+
    "\15\100\1\316\7\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\15\100\1\317\7\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\13\100\1\320"+
    "\11\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\77\13\100\1\321\11\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\257\25\0\25\257\1\0\2\257"+
    "\2\0\3\257\1\0\6\77\3\100\1\322\21\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\262\25\0"+
    "\25\262\1\0\2\262\2\0\3\262\1\0\6\77\16\100"+
    "\1\323\6\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\16\100\1\324\6\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\266\25\0\25\266\1\0"+
    "\2\266\2\0\3\266\1\0\6\325\25\100\25\325\1\100"+
    "\2\325\2\100\2\326\1\325\1\0\6\77\3\100\1\327"+
    "\21\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\272\25\0\25\272\1\0\2\272\2\0\3\272\1\0"+
    "\6\77\16\100\1\330\6\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\272\25\100\25\272\1\100\2\272"+
    "\2\100\2\274\1\272\1\0\6\77\11\100\1\331\13\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\276"+
    "\25\0\25\276\1\0\2\276\2\0\3\276\1\0\6\300"+
    "\25\0\25\300\1\0\2\300\2\0\3\300\1\0\6\77"+
    "\6\100\1\332\16\100\25\77\1\100\2\77\2\100\2\103"+
    "\1\77\1\0\6\303\25\0\25\303\1\0\2\303\2\0"+
    "\3\303\1\0\6\305\25\0\25\305\1\0\2\305\2\0"+
    "\3\305\1\0\6\333\25\100\25\333\1\100\2\333\2\100"+
    "\2\334\1\333\1\0\6\335\25\100\25\335\1\100\2\335"+
    "\2\100\2\336\1\335\1\0\6\311\25\0\25\311\1\0"+
    "\2\311\2\0\3\311\1\0\6\77\1\337\24\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\314\25\0"+
    "\25\314\1\0\2\314\2\0\3\314\1\0\6\77\6\100"+
    "\1\340\16\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\6\100\1\341\16\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\342\25\100\25\342\1\100"+
    "\2\342\2\100\2\343\1\342\1\0\6\344\25\100\25\344"+
    "\1\100\2\344\2\100\2\345\1\344\1\0\6\77\23\100"+
    "\1\346\1\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\1\347\24\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\77\6\100\1\350\16\100\25\77"+
    "\1\100\2\77\2\100\2\103\1\77\1\0\6\325\25\0"+
    "\25\325\1\0\2\325\2\0\3\325\1\0\6\77\23\100"+
    "\1\351\1\100\25\77\1\100\2\77\2\100\2\103\1\77"+
    "\1\0\6\77\25\100\25\77\1\352\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\3\100\1\337\21\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\77\17\100\1\353"+
    "\5\100\25\77\1\100\2\77\2\100\2\103\1\77\1\0"+
    "\6\333\25\0\25\333\1\0\2\333\2\0\3\333\1\0"+
    "\6\335\25\0\25\335\1\0\2\335\2\0\3\335\1\0"+
    "\6\354\25\100\25\354\1\100\2\354\2\100\2\355\1\354"+
    "\1\0\6\77\25\100\25\77\1\356\2\77\2\100\2\103"+
    "\1\77\1\0\6\77\5\100\1\357\17\100\25\77\1\100"+
    "\2\77\2\100\2\103\1\77\1\0\6\342\25\0\25\342"+
    "\1\0\2\342\2\0\3\342\1\0\6\344\25\0\25\344"+
    "\1\0\2\344\2\0\3\344\1\0\6\360\25\100\25\360"+
    "\1\100\2\360\2\100\2\361\1\360\1\0\6\362\25\100"+
    "\25\362\1\100\2\362\2\100\2\363\1\362\1\0\6\364"+
    "\25\100\25\364\1\100\2\364\2\100\2\365\1\364\1\0"+
    "\6\366\25\100\25\366\1\100\2\366\2\100\2\367\1\366"+
    "\1\0\6\77\21\100\1\370\3\100\25\77\1\100\2\77"+
    "\2\100\2\103\1\77\1\0\6\77\11\100\1\371\13\100"+
    "\25\77\1\100\2\77\2\100\2\103\1\77\1\0\6\354"+
    "\25\0\25\354\1\0\2\354\2\0\3\354\1\0\6\372"+
    "\25\100\25\372\1\100\2\372\2\100\2\373\1\372\1\0"+
    "\6\77\3\100\1\374\21\100\25\77\1\100\2\77\2\100"+
    "\2\103\1\77\1\0\6\360\25\0\25\360\1\0\2\360"+
    "\2\0\3\360\1\0\6\362\25\0\25\362\1\0\2\362"+
    "\2\0\3\362\1\0\6\364\25\0\25\364\1\0\2\364"+
    "\2\0\3\364\1\0\6\366\25\0\25\366\1\0\2\366"+
    "\2\0\3\366\1\0\6\372\25\0\25\372\1\0\2\372"+
    "\2\0\3\372\1\0\6\375\25\100\25\375\1\100\2\375"+
    "\2\100\2\376\1\375\1\0\6\375\25\0\25\375\1\0"+
    "\2\375\2\0\3\375";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\24\1\2\11\2\1\10\11\10\1\3\11"+
    "\2\1\1\11\1\1\1\11\1\0\3\1\2\0\2\11"+
    "\1\1\3\0\1\1\34\0\5\11\1\0\6\11\2\1"+
    "\1\0\1\1\1\11\1\0\1\11\1\1\27\0\2\1"+
    "\4\0\2\1\6\0\2\1\2\0\2\1\4\0\2\1"+
    "\12\0\2\1\1\0\2\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\4\1\2\0\2\1"+
    "\1\0\2\1\7\0\2\1\4\0\4\1\3\0\4\1"+
    "\6\0\2\1\2\0\14\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
Stack<Integer> states = new Stack<>();

void pushState(int state) {
  states.push(yystate());
  yybegin(state);
}

void popState() {
  yybegin(states.pop());
}

char quote = ' ';


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 74: break;
          case 2: 
            { return KaraTypes.OP_DIV;
            } 
            // fall through
          case 75: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 76: break;
          case 4: 
            { return KaraTypes.OP_MUL;
            } 
            // fall through
          case 77: break;
          case 5: 
            { return KaraTypes.COLON;
            } 
            // fall through
          case 78: break;
          case 6: 
            { return KaraTypes.COMMA;
            } 
            // fall through
          case 79: break;
          case 7: 
            { return KaraTypes.OP_EQUALS;
            } 
            // fall through
          case 80: break;
          case 8: 
            { return KaraTypes.OP_AND;
            } 
            // fall through
          case 81: break;
          case 9: 
            { return KaraTypes.OP_AT;
            } 
            // fall through
          case 82: break;
          case 10: 
            { return KaraTypes.OPEN_BODY;
            } 
            // fall through
          case 83: break;
          case 11: 
            { return KaraTypes.CLOSE_BODY;
            } 
            // fall through
          case 84: break;
          case 12: 
            { return KaraTypes.OPEN_BRACE;
            } 
            // fall through
          case 85: break;
          case 13: 
            { return KaraTypes.CLOSE_BRACE;
            } 
            // fall through
          case 86: break;
          case 14: 
            { return KaraTypes.OPEN_SQUARE;
            } 
            // fall through
          case 87: break;
          case 15: 
            { return KaraTypes.CLOSE_SQUARE;
            } 
            // fall through
          case 88: break;
          case 16: 
            { return KaraTypes.DOT;
            } 
            // fall through
          case 89: break;
          case 17: 
            { return KaraTypes.OP_GREATER;
            } 
            // fall through
          case 90: break;
          case 18: 
            { return KaraTypes.OP_ADD;
            } 
            // fall through
          case 91: break;
          case 19: 
            { return KaraTypes.OP_SUB;
            } 
            // fall through
          case 92: break;
          case 20: 
            { return KaraTypes.OP_MOD;
            } 
            // fall through
          case 93: break;
          case 21: 
            { return KaraTypes.OP_EXCLAM;
            } 
            // fall through
          case 94: break;
          case 22: 
            { return KaraTypes.OP_LESSER;
            } 
            // fall through
          case 95: break;
          case 23: 
            { return KaraTypes.OP_QUESTION;
            } 
            // fall through
          case 96: break;
          case 24: 
            { return KaraTypes.BACKSLASH;
            } 
            // fall through
          case 97: break;
          case 25: 
            { pushState(SINGLE_STRING); return KaraTypes.QUOTE;
            } 
            // fall through
          case 98: break;
          case 26: 
            { pushState(DOUBLE_STRING); return KaraTypes.QUOTE;
            } 
            // fall through
          case 99: break;
          case 27: 
            { return KaraTypes.STRING_PART;
            } 
            // fall through
          case 100: break;
          case 28: 
            { popState(); return KaraTypes.QUOTE;
            } 
            // fall through
          case 101: break;
          case 29: 
            { return KaraTypes.OP_DIV_EQUALS;
            } 
            // fall through
          case 102: break;
          case 30: 
            { return KaraTypes.OP_MUL_EQUALS;
            } 
            // fall through
          case 103: break;
          case 31: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return KaraTypes.NAME;
            } 
            // fall through
          case 104: break;
          case 32: 
            { return KaraTypes.OP_COMPARE;
            } 
            // fall through
          case 105: break;
          case 33: 
            { return KaraTypes.FUNC_DASH;
            } 
            // fall through
          case 106: break;
          case 34: 
            { return KaraTypes.OP_ANDAND;
            } 
            // fall through
          case 107: break;
          case 35: 
            { return KaraTypes.OP_GE;
            } 
            // fall through
          case 108: break;
          case 36: 
            { return KaraTypes.OP_ADD_EQUALS;
            } 
            // fall through
          case 109: break;
          case 37: 
            { return KaraTypes.OP_SUB_EQUALS;
            } 
            // fall through
          case 110: break;
          case 38: 
            { return KaraTypes.OP_MOD_EQUALS;
            } 
            // fall through
          case 111: break;
          case 39: 
            { return KaraTypes.OP_NCOMPARE;
            } 
            // fall through
          case 112: break;
          case 40: 
            { return KaraTypes.OP_LE;
            } 
            // fall through
          case 113: break;
          case 41: 
            { return KaraTypes.OP_FALLBACK;
            } 
            // fall through
          case 114: break;
          case 42: 
            { return KaraTypes.OP_OROR;
            } 
            // fall through
          case 115: break;
          case 43: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 2;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return KaraTypes.NUMBER;
            } 
            // fall through
          case 116: break;
          case 44: 
            { return KaraTypes.STRING_ESCAPE;
            } 
            // fall through
          case 117: break;
          case 45: 
            { return KaraTypes.COMMENT;
            } 
            // fall through
          case 118: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return KaraTypes.IF_DECL;
            } 
            // fall through
          case 119: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return KaraTypes.AS_DECL;
            } 
            // fall through
          case 120: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.PTR_DECL;
            } 
            // fall through
          case 121: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.FOR_DECL;
            } 
            // fall through
          case 122: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.LET_DECL;
            } 
            // fall through
          case 123: break;
          case 51: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.PRIMITIVE;
            } 
            // fall through
          case 124: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.ANY;
            } 
            // fall through
          case 125: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return KaraTypes.VAR_DECL;
            } 
            // fall through
          case 126: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.TYPE_DECL;
            } 
            // fall through
          case 127: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.TRUE;
            } 
            // fall through
          case 128: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.EXIT_DECL;
            } 
            // fall through
          case 129: break;
          case 57: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.FUNC_DECL;
            } 
            // fall through
          case 130: break;
          case 58: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.PRIMITIVE;
            } 
            // fall through
          case 131: break;
          case 59: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.NULL;
            } 
            // fall through
          case 132: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return KaraTypes.MOVE_DECL;
            } 
            // fall through
          case 133: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return KaraTypes.PRIMITIVE;
            } 
            // fall through
          case 134: break;
          case 62: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return KaraTypes.FALSE;
            } 
            // fall through
          case 135: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return KaraTypes.BLOCK_DECL;
            } 
            // fall through
          case 136: break;
          case 64: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return KaraTypes.BREAK_DECL;
            } 
            // fall through
          case 137: break;
          case 65: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return KaraTypes.PRIMITIVE;
            } 
            // fall through
          case 138: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return KaraTypes.LOCKED_DECL;
            } 
            // fall through
          case 139: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return KaraTypes.IMPORT_DECL;
            } 
            // fall through
          case 140: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return KaraTypes.RETURN_DECL;
            } 
            // fall through
          case 141: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return KaraTypes.HINT_SHARED;
            } 
            // fall through
          case 142: break;
          case 70: 
            { return KaraTypes.VARARGS;
            } 
            // fall through
          case 143: break;
          case 71: 
            { return KaraTypes.EXTERNAL;
            } 
            // fall through
          case 144: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return KaraTypes.NOTHING;
            } 
            // fall through
          case 145: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return KaraTypes.CONTINUE_DECL;
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
