{
  parserClass="me.desgroup.kara.KaraParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Kara"
  psiImplClassSuffix="Impl"
  psiPackage="me.desgroup.kara.psi"
  psiImplPackage="me.desgroup.kara.psi.impl"

  elementTypeHolderClass="me.desgroup.kara.psi.KaraTypes"
  elementTypeClass="me.desgroup.kara.psi.KaraElement"
  tokenTypeClass="me.desgroup.kara.psi.KaraToken"
}

root ::= (import|type|variable-strict|function-loose|COMMENT)*

import ::= IMPORT_DECL (OPEN_BRACE NAME CLOSE_BRACE)? literal-string {pin=1}

typename ::=
      typename-reference
    | typename-optional
    | typename-array
    | typename-primitive
    | typename-named
    | typename-function

typename-reference-attribute ::= HINT_SHARED | LET_DECL | VAR_DECL | PTR_DECL
typename-reference ::= (OP_AND | OP_MUL) typename-reference-attribute* typename {pin=1}
typename-optional ::= (OP_QUESTION | OP_EXCLAM) typename {pin=1}
typename-array ::= OPEN_SQUARE typename typename-array-spec? CLOSE_SQUARE {pin=1}
typename-primitive ::= PRIMITIVE | ANY | NOTHING | NULL
typename-named ::= NAME
typename-function ::= FUNC_DECL LOCKED_DECL? PTR_DECL? typename-function-parameters typename {pin=1}
typename-function-parameters ::= OPEN_BRACE (typename COMMA?)* CLOSE_BRACE

typename-array-spec ::=
      typename-array-spec-fixed
    | typename-array-spec-unbounded-sized
    | typename-array-spec-enumerable
    | typename-array-spec-unbounded

typename-array-spec-fixed ::= COLON NUMBER
typename-array-spec-unbounded ::= COLON
typename-array-spec-unbounded-sized ::= COLON expression
typename-array-spec-enumerable ::= COLON COLON

expression ::= expression-part (binary expression-part)*

expression-part ::= unary* literal (expression-grouping | modifier)*

expression-grouping ::= ternary | as | slash
ternary ::= OP_QUESTION expression COLON expression {pin=1}
as ::= AS_DECL typename {pin=1}
slash ::= BACKSLASH

unary ::= OP_EXCLAM | OP_SUB | OP_AND | OP_AT | MOVE_DECL
binary ::=
      OP_ADD
    | OP_SUB
    | OP_MUL
    | OP_DIV
    | OP_MOD
    | OP_COMPARE
    | OP_NCOMPARE
    | OP_GE
    | OP_LE
    | OP_GREATER
    | OP_LESSER
    | OP_ANDAND
    | OP_OROR
    | OP_FALLBACK

literal ::=
      literal-parens
    | literal-array
    | literal-string
    | literal-special
    | literal-bool
    | literal-number
    | literal-new
    | literal-reference
literal-parens ::= OPEN_BRACE expression CLOSE_BRACE {pin=1}
literal-array ::= OPEN_SQUARE (expression COMMA?)* CLOSE_SQUARE {pin=1}
literal-string ::= QUOTE (STRING_PART | STRING_ESCAPE | STRING_INSERT)* QUOTE {pin=1}
literal-special ::= ANY | NOTHING | NULL
literal-bool ::= TRUE | FALSE
literal-number ::= NUMBER
literal-new ::= OP_MUL typename {pin=1}
literal-reference ::= NAME

modifier ::= modifier-call | modifier-index | modifier-dot
modifier-call ::= OPEN_BRACE (modifier-call-part COMMA?)* CLOSE_BRACE {pin=1}
modifier-call-part ::= (NAME COLON)? expression
modifier-index ::= OPEN_SQUARE expression CLOSE_SQUARE {pin=1}
modifier-dot ::= DOT (unary | NAME) {pin=1}

type ::= TYPE_DECL NAME type-body {pin=1}
type-body ::= type-alias-body | type-wrapper-body
type-alias-body ::= OP_EQUALS typename {pin=1}
type-wrapper-body ::= type-declaration-body
type-declaration-body ::= OPEN_BODY type-elements CLOSE_BODY {pin=1}
type-elements ::= (variable-loose COMMA?)*

variable ::= NAME ((typename? OP_EQUALS expression) | typename)
variable-loose ::= (LET_DECL | VAR_DECL)? variable {pin="LET_DECL | VAR_DECL"}
variable-strict ::= (LET_DECL | VAR_DECL) variable {pin=1}

function ::= NAME function-parameters? typename? ((EXTERNAL VARARGS?) | function-body)
function-parameters ::= OPEN_BRACE (variable-loose COMMA?)* CLOSE_BRACE
function-body ::= function-value-body | function-declaration-body
function-value-body ::= FUNC_DASH expression
function-declaration-body ::= code
function-loose ::= FUNC_DECL? function {pin="FUNC_DECL"}
function-strict ::= FUNC_DECL function {pin=1}

body ::= (body-line COMMA?)*
body-line ::=
      body-if
    | body-for
    | body-block
    | body-statement
    | variable-strict
    | body-assign
    | expression
    | function-strict
    | COMMENT

body-if ::= IF_DECL expression code {pin=1}
body-for ::= FOR_DECL expression? code {pin=1}
body-block ::= (BLOCK_DECL | EXIT_DECL) code {pin=1}
body-assign ::= expression body-assign-op expression
body-assign-op ::=
      OP_EQUALS
    | OP_ADD_EQUALS
    | OP_SUB_EQUALS
    | OP_MUL_EQUALS
    | OP_DIV_EQUALS
    | OP_MOD_EQUALS
body-statement ::= body-statement-return | BREAK_DECL | CONTINUE_DECL
body-statement-return ::= RETURN_DECL expression?

code ::= OPEN_BODY body CLOSE_BODY {pin=1}
